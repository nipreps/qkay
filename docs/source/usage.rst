How to Use
==========
Introduction
------------

Q’kay is a web service developed to deploy rigorous Quality Control (QC) protocols on large datasets, leveraging individual reports generated by tools like MRIQC and fMRIPrep. It follows a model-view-controller architecture, with a MongoDB database storing user data, datasets, and expert manual assessments ('ratings') for each evaluated image.

Q’kay offers a comprehensive suite of features, including:

- **Progress Tracking:** Q’kay tracks and stores the progression of raters, allowing for flexible task splitting and efficient workload management.
- **Docker Containerization:** Q’kay is easy to deploy and use across various environments.
- **Secure Login System:** Q’kay provides front-end views for administrators and raters, with administrators having exclusive access to assessment management, dataset uploads, and user administration.
- **Reproducible Protocols:** Q’kay offers specific feature options to anonymize, shuffle, and repeat visual reports in a reproducible manner.
- **Centralized Database:** All user information, datasets, progression data, and expert assessments are stored in the same MongoDB database, facilitating efficient data management and retrieval.

The graphical user interface, powered by the BootstrapJS library, is accessible via standard web browsers. The backend controller, implemented in Python using the Flask framework, provides a secure login system.

Running with Docker
-------------------

To run the Q'kay package using Docker Compose, you'll need to have Docker and Docker Compose installed on your machine. You can download and install them from the following links:

- [Docker](https://docs.docker.com/get-docker/)
- [Docker Compose](https://docs.docker.com/compose/install/)

Before using Q'kay with Docker, you will need to set up the necessary environment variables by completing the `.env` file. In this file, you should provide the path to the Mongo database and the path to all datasets that you want to evaluate. If there is more than one dataset, the path should be the parent folder.

Run the containers with Docker Compose:

    .. code-block:: bash

        $ docker-compose up

After running the containers, you can access the application at `http://localhost`.

Get Started with Q'kay
----------------------

To begin using Q'kay, follow these steps:

1. Once the containers are up and running, open a web browser and navigate to https://localhost.

2. Log in to the application using the following credentials:
    - **Username:** Admin
    - **Password:** abcd

3. After logging in, it is recommended to go to the Admin panel and change your password to something more secure.

4. In the Admin panel, you can add your first dataset by clicking on the "Add Dataset" button. You will see the list all of datasets present in the folder dataset you indicated in the `.env` file. Select the dataset you want to add and click on the "Add" button. 
The name of the dataset is inferred from the file dataset_description.json in the folder of the dataset if it exists. If it does not exist, the name of the dataset will be the name of the folder.
   
5. Add your first users
    - In the Admin panel, click on the "Add User" button to add a new user.
    - Provide the following information for the user:
      - **Username:** The username for the new user.
      - **Password:** The password for the new user.

They will be able to update their password after logging in.

6. Assign the dataset to the user
    - In the Admin panel, click on the "Assign Dataset" button to assign a dataset to a user.
    - Select the user from the dropdown list.
    - Select the dataset from the dropdown list.
    - Select the options such as randomize the order, repeat or anonymize the reports.
    - Click on the "Assign" button.

7. The user can now log in and start rating the images in the dataset assigned to them.


